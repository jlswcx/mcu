
WirelessPad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000184  000001f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000184  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000230  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001100  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a88  00000000  00000000  00001458  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001164  00000000  00000000  00001ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000013c  00000000  00000000  00003044  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000fd21  00000000  00000000  00003180  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002e2  00000000  00000000  00012ea1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  00013183  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00003dff  00000000  00000000  00013243  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	44 c0       	rjmp	.+136    	; 0x8e <__bad_interrupt>
   6:	00 00       	nop
   8:	42 c0       	rjmp	.+132    	; 0x8e <__bad_interrupt>
   a:	00 00       	nop
   c:	40 c0       	rjmp	.+128    	; 0x8e <__bad_interrupt>
   e:	00 00       	nop
  10:	3e c0       	rjmp	.+124    	; 0x8e <__bad_interrupt>
  12:	00 00       	nop
  14:	3c c0       	rjmp	.+120    	; 0x8e <__bad_interrupt>
  16:	00 00       	nop
  18:	3a c0       	rjmp	.+116    	; 0x8e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	38 c0       	rjmp	.+112    	; 0x8e <__bad_interrupt>
  1e:	00 00       	nop
  20:	36 c0       	rjmp	.+108    	; 0x8e <__bad_interrupt>
  22:	00 00       	nop
  24:	34 c0       	rjmp	.+104    	; 0x8e <__bad_interrupt>
  26:	00 00       	nop
  28:	32 c0       	rjmp	.+100    	; 0x8e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	30 c0       	rjmp	.+96     	; 0x8e <__bad_interrupt>
  2e:	00 00       	nop
  30:	2e c0       	rjmp	.+92     	; 0x8e <__bad_interrupt>
  32:	00 00       	nop
  34:	2c c0       	rjmp	.+88     	; 0x8e <__bad_interrupt>
  36:	00 00       	nop
  38:	2a c0       	rjmp	.+84     	; 0x8e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	28 c0       	rjmp	.+80     	; 0x8e <__bad_interrupt>
  3e:	00 00       	nop
  40:	26 c0       	rjmp	.+76     	; 0x8e <__bad_interrupt>
  42:	00 00       	nop
  44:	24 c0       	rjmp	.+72     	; 0x8e <__bad_interrupt>
  46:	00 00       	nop
  48:	22 c0       	rjmp	.+68     	; 0x8e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	20 c0       	rjmp	.+64     	; 0x8e <__bad_interrupt>
  4e:	00 00       	nop
  50:	1e c0       	rjmp	.+60     	; 0x8e <__bad_interrupt>
  52:	00 00       	nop
  54:	1c c0       	rjmp	.+56     	; 0x8e <__bad_interrupt>
  56:	00 00       	nop
  58:	1a c0       	rjmp	.+52     	; 0x8e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	18 c0       	rjmp	.+48     	; 0x8e <__bad_interrupt>
  5e:	00 00       	nop
  60:	16 c0       	rjmp	.+44     	; 0x8e <__bad_interrupt>
  62:	00 00       	nop
  64:	14 c0       	rjmp	.+40     	; 0x8e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e8       	ldi	r30, 0x84	; 132
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	4f d0       	rcall	.+158    	; 0x12a <main>
  8c:	79 c0       	rjmp	.+242    	; 0x180 <_exit>

0000008e <__bad_interrupt>:
  8e:	b8 cf       	rjmp	.-144    	; 0x0 <__vectors>

00000090 <ISD_Init>:

#define ISD_SS	PORTB2


void ISD_Init(void) {
	ISD_SS = 1;
  90:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <PORTBbit>
  94:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <PORTBbit+0x1>
  98:	80 81       	ld	r24, Z
  9a:	84 60       	ori	r24, 0x04	; 4
  9c:	80 83       	st	Z, r24
  9e:	08 95       	ret

000000a0 <SPI_Init>:
#include "io_168pa.h"


void SPI_Init(void) {  

	SPCRbit->SPE = 1;		// 使能SPI
  a0:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <SPCRbit>
  a4:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <SPCRbit+0x1>
  a8:	80 81       	ld	r24, Z
  aa:	80 64       	ori	r24, 0x40	; 64
  ac:	80 83       	st	Z, r24
	SPCRbit->MSTR = 1;		// 主模式
  ae:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <SPCRbit>
  b2:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <SPCRbit+0x1>
  b6:	80 81       	ld	r24, Z
  b8:	80 61       	ori	r24, 0x10	; 16
  ba:	80 83       	st	Z, r24
	SPCRbit->SPR0 = 1;
  bc:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <SPCRbit>
  c0:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <SPCRbit+0x1>
  c4:	80 81       	ld	r24, Z
  c6:	81 60       	ori	r24, 0x01	; 1
  c8:	80 83       	st	Z, r24
	SPCRbit->CPOL = 1;		// SCK空闲时为高电平
  ca:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <SPCRbit>
  ce:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <SPCRbit+0x1>
  d2:	80 81       	ld	r24, Z
  d4:	88 60       	ori	r24, 0x08	; 8
  d6:	80 83       	st	Z, r24
	SPCRbit->CPHA = 0;		// 采样
  d8:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <SPCRbit>
  dc:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <SPCRbit+0x1>
  e0:	80 81       	ld	r24, Z
  e2:	8b 7f       	andi	r24, 0xFB	; 251
  e4:	80 83       	st	Z, r24
  e6:	08 95       	ret

000000e8 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  e8:	08 95       	ret

000000ea <led_aux>:
// PIN9->PD5
// PIN10->PD6


void led_aux(char i) {
	if(i == 1) {
  ea:	81 30       	cpi	r24, 0x01	; 1
  ec:	79 f4       	brne	.+30     	; 0x10c <led_aux+0x22>
		PORTB7 = 1;
  ee:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <PORTBbit>
  f2:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <PORTBbit+0x1>
  f6:	80 81       	ld	r24, Z
  f8:	80 68       	ori	r24, 0x80	; 128
  fa:	80 83       	st	Z, r24
		PORTB6 = 0;
  fc:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <PORTBbit>
 100:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <PORTBbit+0x1>
 104:	80 81       	ld	r24, Z
 106:	8f 7b       	andi	r24, 0xBF	; 191
 108:	80 83       	st	Z, r24
 10a:	08 95       	ret
	}else {
		PORTB6 = 1;
 10c:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <PORTBbit>
 110:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <PORTBbit+0x1>
 114:	80 81       	ld	r24, Z
 116:	80 64       	ori	r24, 0x40	; 64
 118:	80 83       	st	Z, r24
		PORTB7 = 0;	
 11a:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <PORTBbit>
 11e:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <PORTBbit+0x1>
 122:	80 81       	ld	r24, Z
 124:	8f 77       	andi	r24, 0x7F	; 127
 126:	80 83       	st	Z, r24
 128:	08 95       	ret

0000012a <main>:

int main (void)
{
	/* Insert system clock initialization code here (sysclk_init()). */

	board_init();
 12a:	de df       	rcall	.-68     	; 0xe8 <board_init>

	/* Insert application code here, after the board has been initialized. */
	


	DDRB6 = 1;
 12c:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <DDRBbit>
 130:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <DDRBbit+0x1>
 134:	80 81       	ld	r24, Z
 136:	80 64       	ori	r24, 0x40	; 64
 138:	80 83       	st	Z, r24
	DDRB7 = 1;
 13a:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <DDRBbit>
 13e:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <DDRBbit+0x1>
 142:	80 81       	ld	r24, Z
 144:	80 68       	ori	r24, 0x80	; 128
 146:	80 83       	st	Z, r24
	DDRD5 = 1;
 148:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <DDRDbit>
 14c:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <DDRDbit+0x1>
 150:	80 81       	ld	r24, Z
 152:	80 62       	ori	r24, 0x20	; 32
 154:	80 83       	st	Z, r24
	DDRD6 = 1;
 156:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <DDRDbit>
 15a:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <DDRDbit+0x1>
 15e:	80 81       	ld	r24, Z
 160:	80 64       	ori	r24, 0x40	; 64


	SPI_Init();
 162:	80 83       	st	Z, r24
	ISD_Init();
 164:	9d df       	rcall	.-198    	; 0xa0 <SPI_Init>
 166:	94 df       	rcall	.-216    	; 0x90 <ISD_Init>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 168:	c8 ec       	ldi	r28, 0xC8	; 200
 16a:	d0 e0       	ldi	r29, 0x00	; 0
	//unsigned p						:8;
//} PORTbits_t;
//volatile PORTbits_t *PORTBbit = (PORTbits_t*)(PORTB_ADDRESS+__SFR_OFFSET);

int main (void)
{
 16c:	80 e1       	ldi	r24, 0x10	; 16
 16e:	97 e2       	ldi	r25, 0x27	; 39
 170:	fe 01       	movw	r30, r28
 172:	31 97       	sbiw	r30, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <main+0x48>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 176:	01 97       	sbiw	r24, 0x01	; 1
		//led_potty(1);
		//led_bed(0);
		//led_red(1);
		//led_green(0);
		_delay_ms(1000);
		led_aux(0);
 178:	d9 f7       	brne	.-10     	; 0x170 <main+0x46>
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	b6 df       	rcall	.-148    	; 0xea <led_aux>

	}
 17e:	f6 cf       	rjmp	.-20     	; 0x16c <main+0x42>

00000180 <_exit>:
 180:	f8 94       	cli

00000182 <__stop_program>:
 182:	ff cf       	rjmp	.-2      	; 0x182 <__stop_program>
